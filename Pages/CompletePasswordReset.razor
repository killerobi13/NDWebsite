@page "/CompletePasswordReset"
@using System.Text.RegularExpressions
@using System.Net.Mail
@using Exceptions
@inject Helpers.SessionState Session
@inject IJSRuntime JSRuntime
@inject Services.UserService UserService
@inject NavigationManager navManager
@using System.Web
<fieldset id="reg_form" class="register-form">
    <div id="legend">
        <legend>Password Reset</legend>
    </div>


    <div class="control-group">
        <!-- Password-->
        <label class="control-label" for="password">@Session.language.GetPassword()</label>
        <div class="controls">
            <input type="password" id="password" name="password" placeholder="" @bind-value="Password" @bind-value:event="onchange" class="input-xlarge">
            <p class="help-block" style="color:@PasswordValidationColor">@PasswordValidation</p>
        </div>
    </div>

    <div class="control-group">
        <!-- Password -->
        <label class="control-label" for="password_confirm">@Session.language.GetPasswordConfirm()</label>
        <div class="controls">
            <input type="password" id="password_confirm" name="password_confirm" placeholder="" @bind-value="PasswordConfirm" @bind-value:event="onchange" class="input-xlarge">
            <p class="help-block" style="color:@PasswordConfirmValidationColor">@PasswordConfirmValidation</p>
        </div>
    </div>

    <div class="control-group">
        <!-- Button -->
        <div class="controls">
            <button class="btn btn-success" style="width:100%" @onclick="ResetPass">Reset Password</button>
            <p class="help-block" style="color:@FinalValidationColor;text-align:center; padding:5px">@FinalValidation</p>

        </div>
    </div>
</fieldset>

@code {


    private void RefreshMe()
    {
        StateHasChanged();
    }

    private string FinalValidationColor { get; set; } = RED;
    private string FinalValidation { get; set; } = "";


    private string Password { get; set; } = "";
    private string PasswordConfirm { get; set; } = "";


    private string PasswordValidation { get; set; } = "";
    private string PasswordConfirmValidation { get; set; } = "";



    private string PasswordValidationColor { get; set; } = RED;
    private string PasswordConfirmValidationColor { get; set; } = RED;

    private const string GREEN = "green";
    private const string RED = "red";
    private string username;
    private string token;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            Display();

    }
    protected override void OnInitialized()
    {
        string queryString = navManager.Uri.Substring(navManager.Uri.IndexOf('?') + 1);
        var parsedString = HttpUtility.HtmlDecode(queryString);
        username = HttpUtility.ParseQueryString(parsedString)["username"];
        token = HttpUtility.ParseQueryString(parsedString)["token"];
        Session.RefreshRequested += RefreshMe;
    }


    private async void Display()
    {
        await JSRuntime.InvokeAsync<string>("display", "#reg_form");
    }

    public void ResetPass()
    {
        UserService.ResetPassword(username, token, Password);
        Regex passwordValidation = new Regex(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,20}$");


        if (passwordValidation.IsMatch(Password))
        {
            PasswordValidation = Session.language.GetValidRegistrationPassword();
            PasswordValidationColor = GREEN;
        }
        else
        {
            PasswordValidation = Session.language.GetInvalidRegistrationPassword();
            PasswordValidationColor = RED;
            return;

        }

        if (Password.Equals(PasswordConfirm))
        {
            PasswordConfirmValidation = Session.language.GetValidRegistrationPasswordConfirm();
            PasswordConfirmValidationColor = GREEN;
        }
        else
        {
            PasswordConfirmValidation = Session.language.GetInvalidRegistrationPasswordConfirm();
            PasswordConfirmValidationColor = RED;
            return;

        }

        try
        {
            if(UserService.ResetPassword(username,token,Password))
            {
                FinalValidationColor = GREEN;
                FinalValidation = "The password has been reset";
            }
            else
            {
                FinalValidationColor = RED;
                FinalValidation = "Token is invalid";
            }
        }
        catch(Exception ex)
        {
            FinalValidationColor = RED;
            FinalValidation = "An error occured";
        }
    }
}